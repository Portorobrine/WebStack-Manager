#!/bin/bash
# Script de validation des op√©rations manuelles
# Usage: ./validate-manual-ops.sh [nom_projet]

set -e

COMPOSE_FILE="docker-compose.yml"
PROJECTS_DIR="projects"
DATA_DIR="data"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions d'affichage
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }

# Validation de la syntaxe YAML
validate_yaml() {
    info "Validation de la syntaxe docker-compose.yml..."
    if docker compose config > /dev/null 2>&1; then
        success "Syntaxe YAML valide"
    else
        error "Erreur de syntaxe YAML !"
        docker compose config 2>&1 | head -5
        return 1
    fi
}

# Lister tous les projets d√©tect√©s
list_all_projects() {
    info "Projets d√©tect√©s dans docker-compose.yml :"
    
    if [ -f "$COMPOSE_FILE" ]; then
        projects=$(grep "container_name: .*_web" "$COMPOSE_FILE" 2>/dev/null | sed 's/.*: \(.*\)_web/\1/' || true)
        if [ -n "$projects" ]; then
            echo "$projects" | while read -r project; do
                echo "  - $project"
            done
        else
            warning "Aucun projet trouv√© dans docker-compose.yml"
        fi
    else
        error "Fichier docker-compose.yml introuvable"
    fi
}

# Validation d'un projet sp√©cifique
validate_project() {
    local project="$1"
    
    info "Validation du projet '$project'..."
    
    # V√©rifier la pr√©sence dans docker-compose.yml
    if grep -q "container_name: ${project}_web" "$COMPOSE_FILE" 2>/dev/null; then
        success "Service ${project}_web trouv√© dans docker-compose.yml"
    else
        error "Service ${project}_web manquant dans docker-compose.yml"
        return 1
    fi
    
    if grep -q "container_name: ${project}_db" "$COMPOSE_FILE" 2>/dev/null; then
        success "Service ${project}_db trouv√© dans docker-compose.yml"
    else
        error "Service ${project}_db manquant dans docker-compose.yml"
        return 1
    fi
    
    # V√©rifier le r√©seau
    if grep -q "^  ${project}_net:" "$COMPOSE_FILE" 2>/dev/null; then
        success "R√©seau ${project}_net trouv√© dans docker-compose.yml"
    else
        error "R√©seau ${project}_net manquant dans docker-compose.yml"
        return 1
    fi
    
    # V√©rifier les r√©pertoires
    if [ -d "$PROJECTS_DIR/$project" ]; then
        success "R√©pertoire projects/$project existe"
        
        if [ -f "$PROJECTS_DIR/$project/index.html" ]; then
            success "Fichier index.html trouv√©"
        else
            warning "Fichier index.html manquant"
        fi
    else
        error "R√©pertoire projects/$project manquant"
        return 1
    fi
    
    if [ -d "$DATA_DIR/$project" ]; then
        success "R√©pertoire data/$project existe"
    else
        error "R√©pertoire data/$project manquant"
        return 1
    fi
    
    # V√©rifier l'√©tat des containers
    if docker compose ps | grep -q "${project}_web.*Up"; then
        success "Container ${project}_web en cours d'ex√©cution"
    else
        warning "Container ${project}_web non d√©marr√©"
    fi
    
    if docker compose ps | grep -q "${project}_db.*Up"; then
        success "Container ${project}_db en cours d'ex√©cution"
    else
        warning "Container ${project}_db non d√©marr√©"
    fi
    
    # Test de connectivit√© web
    info "Test de connectivit√© web..."
    if curl -s -o /dev/null -w "%{http_code}" "http://localhost/$project/" | grep -q "200"; then
        success "Acc√®s web fonctionnel : http://localhost/$project/"
    else
        warning "Acc√®s web non fonctionnel ou service non d√©marr√©"
    fi
}

# Validation globale de l'environnement
validate_environment() {
    info "Validation de l'environnement global..."
    
    # V√©rifier que Traefik est pr√©sent et prot√©g√©
    if grep -q "container_name: traefik" "$COMPOSE_FILE" 2>/dev/null; then
        success "Service Traefik trouv√©"
    else
        error "Service Traefik manquant !"
        return 1
    fi
    
    if grep -q "^  traefik:" "$COMPOSE_FILE" 2>/dev/null; then
        success "R√©seau traefik prot√©g√©"
    else
        error "R√©seau traefik manquant !"
        return 1
    fi
    
    # V√©rifier l'√©tat de Traefik
    if docker compose ps | grep -q "traefik.*Up"; then
        success "Container Traefik en cours d'ex√©cution"
        
        # Test API Traefik
        if curl -s -o /dev/null -w "%{http_code}" "http://localhost:8080/api/overview" | grep -q "200"; then
            success "API Traefik accessible : http://localhost:8080/"
        else
            warning "API Traefik non accessible"
        fi
    else
        error "Container Traefik non d√©marr√©"
        return 1
    fi
    
    # V√©rifier les Dockerfiles
    if [ -f "Dockerfile.httpd" ]; then
        success "Dockerfile.httpd pr√©sent"
    else
        error "Dockerfile.httpd manquant"
    fi
    
    if [ -f "Dockerfile.mariadb" ]; then
        success "Dockerfile.mariadb pr√©sent"
    else
        error "Dockerfile.mariadb manquant"
    fi
}

# Validation de suppression
validate_removal() {
    local project="$1"
    
    info "Validation de la suppression du projet '$project'..."
    
    # V√©rifier que le projet n'existe plus
    if ! grep -q "container_name: ${project}_web" "$COMPOSE_FILE" 2>/dev/null; then
        success "Service ${project}_web supprim√© du docker-compose.yml"
    else
        error "Service ${project}_web encore pr√©sent dans docker-compose.yml"
        return 1
    fi
    
    if ! grep -q "^  ${project}_net:" "$COMPOSE_FILE" 2>/dev/null; then
        success "R√©seau ${project}_net supprim√©"
    else
        error "R√©seau ${project}_net encore pr√©sent"
        return 1
    fi
    
    # V√©rifier que les r√©pertoires sont supprim√©s
    if [ ! -d "$PROJECTS_DIR/$project" ]; then
        success "R√©pertoire projects/$project supprim√©"
    else
        error "R√©pertoire projects/$project encore pr√©sent"
    fi
    
    if [ ! -d "$DATA_DIR/$project" ]; then
        success "R√©pertoire data/$project supprim√©"
    else
        error "R√©pertoire data/$project encore pr√©sent"
    fi
    
    # V√©rifier que les containers sont arr√™t√©s
    if ! docker compose ps | grep -q "${project}_web"; then
        success "Container ${project}_web supprim√©"
    else
        warning "Container ${project}_web encore actif"
    fi
    
    # V√©rifier que Traefik est toujours l√†
    if grep -q "^  traefik:" "$COMPOSE_FILE" 2>/dev/null; then
        success "R√©seau traefik pr√©serv√©"
    else
        error "R√©seau traefik supprim√© par erreur !"
        return 1
    fi
}

# Fonction principale
main() {
    echo "üîç Validation des op√©rations manuelles"
    echo "======================================"
    
    # Validation de base
    validate_yaml || exit 1
    validate_environment || exit 1
    
    if [ -n "$1" ]; then
        if [ "$2" = "--removed" ]; then
            validate_removal "$1"
        else
            validate_project "$1"
        fi
    else
        list_all_projects
        
        echo ""
        info "Usage:"
        echo "  $0                     # Validation globale"
        echo "  $0 nom-projet         # Validation d'un projet"
        echo "  $0 nom-projet --removed # Validation de suppression"
    fi
    
    echo ""
    success "Validation termin√©e"
}

# Ex√©cution
main "$@"
